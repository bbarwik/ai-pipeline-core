name: Reusable Quality Checks

on:
  workflow_call:
    inputs:
      python-version-json:
        description: 'JSON array of Python versions to test'
        type: string
        required: false
        default: '["3.12","3.13"]'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Ruff check
        run: ruff check .

      - name: Ruff format (check only)
        run: ruff format --check .

  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: BasedPyright
        run: basedpyright --level warning

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python-version-json) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with coverage (unit only)
        run: pytest -v --tb=short -m "not integration" --maxfail=1 --durations=10 --cov=ai_pipeline_core --cov-report=term-missing --cov-fail-under=80 -n 4

  integration-test:
    # Always run integration tests for releases (when called from release workflow)
    # Also run on main branch pushes
    if: github.event_name == 'push' || github.event_name == 'workflow_call'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run integration tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          LMNR_PROJECT_API_KEY: ${{ secrets.LMNR_PROJECT_API_KEY }}
        run: |
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "Running integration tests with configured API keys..."
            pytest -v --tb=short -m "integration" --maxfail=1 --durations=30 -n 4
          else
            # For release workflows, integration tests are required
            if [ "${{ github.event_name }}" == "workflow_call" ]; then
              echo "ERROR: Integration tests are required for releases but OPENAI_API_KEY is not set!"
              echo "Please configure the following secrets in GitHub:"
              echo "  - OPENAI_API_KEY"
              echo "  - OPENAI_BASE_URL"
              echo "  - LMNR_PROJECT_API_KEY (optional)"
              exit 1
            else
              echo "WARNING: Skipping integration tests - OPENAI_API_KEY not set"
              echo "Integration tests will be required for releases."
            fi
          fi

      - name: Test showcase.py CLI example
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          LMNR_PROJECT_API_KEY: ${{ secrets.LMNR_PROJECT_API_KEY }}
        run: |
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "Running showcase.py CLI test with configured API keys..."

            # Create a temporary directory for test output
            TEST_DIR=$(mktemp -d)
            echo "Testing showcase.py with output directory: $TEST_DIR"

            # Run the actual showcase CLI with real API calls
            python examples/showcase.py "$TEST_DIR" --temperature 0.5 --batch-size 2

            # Verify the expected directory structure was created
            echo "Verifying directory structure..."

            # Check that main directories exist
            if [ ! -d "$TEST_DIR/input" ]; then
                echo "ERROR: input directory not created"
                exit 1
            fi

            if [ ! -d "$TEST_DIR/analysis" ]; then
                echo "ERROR: analysis directory not created"
                exit 1
            fi

            if [ ! -d "$TEST_DIR/enhanced" ]; then
                echo "ERROR: enhanced directory not created"
                exit 1
            fi

            # Check that files were created in each directory
            INPUT_FILES=$(find "$TEST_DIR/input" -type f | wc -l)
            if [ "$INPUT_FILES" -eq 0 ]; then
                echo "ERROR: No files created in input directory"
                exit 1
            fi

            ANALYSIS_FILES=$(find "$TEST_DIR/analysis" -type f | wc -l)
            if [ "$ANALYSIS_FILES" -eq 0 ]; then
                echo "ERROR: No files created in analysis directory"
                exit 1
            fi

            ENHANCED_FILES=$(find "$TEST_DIR/enhanced" -type f | wc -l)
            if [ "$ENHANCED_FILES" -eq 0 ]; then
                echo "ERROR: No files created in enhanced directory"
                exit 1
            fi

            # Check that files are not empty
            for file in $(find "$TEST_DIR" -type f -name "*.json" -o -name "*.txt" -o -name "*.yaml"); do
                if [ ! -s "$file" ]; then
                    echo "ERROR: File $file is empty"
                    exit 1
                fi
            done

            echo "SUCCESS: showcase.py created expected directory structure"
            echo "Directory contents:"
            find "$TEST_DIR" -type f | sort

            # Cleanup
            rm -rf "$TEST_DIR"
          else
            echo "WARNING: Skipping showcase.py CLI test - OPENAI_API_KEY not set"
            echo "Showcase.py CLI test will be required for releases."
          fi
